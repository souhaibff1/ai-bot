const { Client, GatewayIntentBits, Partials, PermissionsBitField, REST, Routes, ApplicationCommandOptionType } = require('discord.js');
const fs = require('fs');
const config = require('./config.json');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const axios = require('axios');
require('dotenv').config();

// ุงูุชุญูู ูู ูุฌูุฏ ุงููุชุบูุฑุงุช ุงูุจูุฆูุฉ ุงููุทููุจุฉ
if (!process.env.STABILITY_API_KEY || !process.env.GEMINI_API_KEY) {
    console.error('ุฎุทุฃ: ูู ูุชู ุงูุนุซูุฑ ุนูู ุฌููุน ููุงุชูุญ API ุงููุทููุจุฉ.');
    console.error('ูุฑุฌู ุงูุชุฃูุฏ ูู ูุฌูุฏ ุงูููู .env ูุน ุงููุชุบูุฑุงุช ุงูุชุงููุฉ:');
    console.error('STABILITY_API_KEY, GEMINI_API_KEY');
    process.exit(1);
}

// ุฅุนุฏุงุฏ Google Gemini
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-pro" });

// ูุธุงู ุงูุฑุฏูุฏ ุงูุฐูู
const smartResponses = {
    greetings: {
        patterns: ['ุณูุงู', 'ูุฑุญุจุง', 'ูุงู', 'ููุง', 'ุตุจุงุญ', 'ูุณุงุก', 'ุงููุง', 'ุงูุณูุงู', 'ุตุจุงุญ ุงูุฎูุฑ', 'ูุณุงุก ุงูุฎูุฑ'],
        replies: [
            'ูุนูููู ุงูุณูุงู ูุฑุญูุฉ ุงููู ูุจุฑูุงุชู ๐',
            'ุฃููุงู ูุณููุงู! ููู ุญุงููุ ๐',
            'ูุฑุญุจุงู ุจู! ูุณุนุฏูู ุงูุชุญุฏุซ ูุนู ๐ซ'
        ]
    },
    howAreYou: {
        patterns: ['ููู ุญุงูู', 'ุดูููู', 'ุนุงูู ุงูู', 'ูููู', 'ููู ุงูุญุงู', 'ุนุงูู ุงูุฉ', 'ุดุฎุจุงุฑู'],
        replies: [
            'ุงูุญูุฏ ููู ุจุฎูุฑ! ููู ุญุงูู ุฃูุชุ ๐',
            'ุจุฎูุฑ ูุงูุญูุฏ ููู! ุฃุชููู ุฃู ุชููู ุจุฎูุฑ ุฃูุถุงู ๐',
            'ููุชุงุฒ! ูุณุนุฏูู ุณุคุงูู ุนู ุญุงูู ๐ซ'
        ]
    },
    thanks: {
        patterns: ['ุดูุฑุง', 'ุดูุฑุงู', 'ุชุณูู', 'ุฌุฒุงู', 'ูุดููุฑ', 'ูุนุทูู ุงูุนุงููุฉ', 'ุงููู ูุฌุฒุงู'],
        replies: [
            'ุงูุนูู! ุณุนูุฏ ุจูุณุงุนุฏุชู ๐',
            'ูุง ุดูุฑ ุนูู ูุงุฌุจ! ๐',
            'ุฃูุง ููุง ูุฎุฏูุชู ุฏุงุฆูุงู ๐ซ'
        ]
    },
    help: {
        patterns: ['ุณุงุนุฏ', 'ูุณุงุนุฏุฉ', 'ุงุญุชุงุฌ', 'ูููู', 'ุงุฑูุฏ', 'ุฃุฑูุฏ', 'ูุญุชุงุฌ', 'ุชูุฏุฑ', 'ุชูุฏุฑ', 'ุจุฏู'],
        replies: [
            'ุจุงูุชุฃููุฏ! ููู ูููููู ูุณุงุนุฏุชูุ ๐',
            'ุฃูุง ููุง ููุณุงุนุฏุชู! ูุง ุงูุฐู ุชุญุชุงุฌูุ ๐',
            'ูุณุนุฏูู ูุณุงุนุฏุชู! ุชูุถู ุจุทุฑุญ ุณุคุงูู ๐ซ'
        ]
    },
    questions: {
        patterns: ['ูุง ูู', 'ูุงูู', 'ูุง ูู', 'ูุงูู', 'ููู', 'ูุชู', 'ููุงุฐุง', 'ููุด', 'ููู', 'ุงูู', 'ุฃูู', 'ุดููู'],
        replies: [
            'ุณุฃุญุงูู ูุณุงุนุฏุชู ูู ุงูุฅุฌุงุจุฉ ุนูู ุณุคุงูู. ูู ููููู ุชูุถูุญ ุงููุฒูุฏุ ๐ค',
            'ุฃูุง ููุง ููุฅุฌุงุจุฉ ุนูู ุฃุณุฆูุชู. ููู ูููููู ูุณุงุนุฏุชู ุจุดูู ุฃูุถูุ ๐ญ',
            'ุณุคุงู ุฌูุฏ! ุฏุนูู ุฃุณุงุนุฏู ูู ุงูุญุตูู ุนูู ุฅุฌุงุจุฉ ูููุฏุฉ ๐'
        ]
    },
    general: {
        patterns: [],
        replies: [
            'ุฃููู ูุง ุชููู. ูู ูููููู ูุณุงุนุฏุชู ูู ุดูุก ูุญุฏุฏุ ๐ค',
            'ุฃูุง ููุง ูููุณุงุนุฏุฉ! ูู ูุฏูู ุณุคุงู ูุนููุ ๐ก',
            'ูููููู ูุณุงุนุฏุชู ุจุดูู ุฃูุถู ุฅุฐุง ูุงู ูุฏูู ุทูุจ ูุญุฏุฏ ๐ฏ'
        ]
    }
};

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.DirectMessages,
        GatewayIntentBits.GuildIntegrations
    ],
    partials: [Partials.Channel, Partials.Message, Partials.Reaction]
});

// ุฏุงูุฉ ููุญุตูู ุนูู ุฑุฏ ูู Gemini
async function getGeminiResponse(message) {
    try {
        const prompt = `ุฃูุช ูุณุงุนุฏ ุฐูู ูุฏูุฏ ุชุชุญุฏุซ ุงูุนุฑุจูุฉ. ุงูุฑุณุงูุฉ: "${message}"
        ูุฌุจ ุฃู ูููู ุฑุฏู:
        1. ูุฎุชุตุฑุงู ููููุฏุงู
        2. ุจุงููุบุฉ ุงูุนุฑุจูุฉ ุงููุตุญู
        3. ูุฏูุฏุงู ููุญุชุฑูุงู
        4. ูุชุถูู ุฅูููุฌู ููุงุณุจุฉ
        5. ูุง ูุชุฌุงูุฒ 3 ุฃุณุทุฑ

        ุฅุฐุง ูุงู ุงูุณุคุงู ุนู ุงูุฃูุนุงุจุ ูุฏู ุงูุชุฑุงุญุงุช ูุญุฏุฏุฉ ูุฃูุถู ุงูุฃูุนุงุจ ูู ุชูู ุงููุฆุฉ.
        ุฅุฐุง ูุงู ุงูุณุคุงู ุนุงูุงูุ ุงุทูุจ ุชูุถูุญุงู ุฃูุซุฑ.
        `;

        const result = await model.generateContent(prompt);
        const response = await result.response;
        return response.text();
    } catch (error) {
        console.error('ุฎุทุฃ ูู ุงูุญุตูู ุนูู ุฑุฏ ูู Gemini:', error);
        return getSmartResponse(message); // ุงุณุชุฎุฏุงู ุงููุธุงู ุงูุงุญุชูุงุทู
    }
}

// ุฏุงูุฉ ูุฅูุดุงุก ุงูุตูุฑ ุจุงุณุชุฎุฏุงู Stability AI
async function generateImage(prompt, style = 'digital-art') {
    try {
        // ุชุฑุฌูุฉ ุงููุต ุงูุนุฑุจู ุฅูู ุงูุฅูุฌููุฒูุฉ
        const englishPrompt = await translatePrompt(prompt);
        console.log('ุงููุตู ุจุงูุฅูุฌููุฒูุฉ:', englishPrompt);

        // ุชุญุณูู ุงููุตู ุญุณุจ ุงูููุท
        const styleEnhancements = {
            'digital-art': ', digital art style, vibrant colors, detailed, 8k resolution, trending on artstation, professional digital artwork',
            'anime': ', anime style, studio ghibli inspired, detailed character design, vibrant colors, beautiful lighting',
            'realistic': ', photorealistic, highly detailed, professional photography, 8k resolution, natural lighting, sharp focus',
            'painting': ', oil painting, masterpiece, detailed brushstrokes, professional artwork, gallery quality, artistic',
            '3d': ', 3D render, octane render, cinema 4D, highly detailed, professional 3D modeling, realistic textures, volumetric lighting'
        };

        const negativePrompt = 'bad quality, blurry, distorted, deformed, ugly, bad anatomy, poor lighting, poor composition, low resolution, amateur';

        const enhancedPrompt = englishPrompt + (styleEnhancements[style] || styleEnhancements['digital-art']);

        const response = await axios({
            method: 'post',
            url: 'https://api.stability.ai/v1/generation/stable-diffusion-xl-1024-v1-0/text-to-image',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Authorization': `Bearer ${process.env.STABILITY_API_KEY}`
            },
            data: {
                text_prompts: [
                    {
                        text: enhancedPrompt,
                        weight: 1
                    },
                    {
                        text: negativePrompt,
                        weight: -1
                    }
                ],
                cfg_scale: 8,
                height: 1024,
                width: 1024,
                steps: 50,
                samples: 1,
                style_preset: style === 'anime' ? 'anime' : 'photographic',
                sampler: 'DDIM'
            }
        });

        if (response.data && response.data.artifacts && response.data.artifacts.length > 0) {
            return response.data.artifacts[0].base64;
        } else {
            throw new Error('ูู ูุชู ุงุณุชูุงู ุจูุงูุงุช ุงูุตูุฑุฉ');
        }
    } catch (error) {
        console.error('ุฎุทุฃ ูู ุฅูุดุงุก ุงูุตูุฑุฉ:', error.response?.data || error.message);
        throw error;
    }
}

// ุฏุงูุฉ ูุชุฑุฌูุฉ ุงููุต ุงูุนุฑุจู ุฅูู ุงูุฅูุฌููุฒูุฉ
async function translatePrompt(arabicText) {
    try {
        const result = await model.generateContent(`
            ุฃูุช ุฎุจูุฑ ูู ุชุฑุฌูุฉ ุงูุฃูุตุงู ุงูุนุฑุจูุฉ ุฅูู ุงูุฅูุฌููุฒูุฉ ูุฅูุดุงุก ุงูุตูุฑ.
            ูู ุจุชุฑุฌูุฉ ุงููุต ุงูุชุงูู ูุน:
            1. ุงูุญูุงุธ ุนูู ุฌููุน ุงูุชูุงุตูู ุงููููุฉ
            2. ุฅุถุงูุฉ ุชูุงุตูู ูุตููุฉ ุฅุถุงููุฉ ุชุญุณู ุฌูุฏุฉ ุงูุตูุฑุฉ
            3. ุงุณุชุฎุฏุงู ูุตุทูุญุงุช ูููุฉ ููุงุณุจุฉ
            4. ุชุฌูุจ ุงูุชุฑุฌูุฉ ุงูุญุฑููุฉ ูุงุณุชุฎุฏุงู ุชุนุจูุฑุงุช ุทุจูุนูุฉ
            
            ุงููุต ุงูุนุฑุจู: "${arabicText}"
            
            ูู ุจุฅุนุทุงุก ุงูุชุฑุฌูุฉ ููุท ุจุฏูู ุฃู ูุต ุฅุถุงูู.
        `);
        const response = await result.response;
        const translatedText = response.text()
            .replace(/^["']|["']$/g, '') // ุฅุฒุงูุฉ ุนูุงูุงุช ุงูุชูุตูุต
            .trim();
        
        console.log('ุงููุต ุงูุฃุตูู:', arabicText);
        console.log('ุงูุชุฑุฌูุฉ:', translatedText);
        
        return translatedText;
    } catch (error) {
        console.error('ุฎุทุฃ ูู ุงูุชุฑุฌูุฉ:', error);
        return arabicText;
    }
}

// ุฏุงูุฉ ููุญุตูู ุนูู ุฑุฏ ููุงุณุจ
function getSmartResponse(message) {
    try {
        console.log('ุชุญููู ุงูุฑุณุงูุฉ:', message);
        const text = message.trim();
        
        // ุงูุจุญุซ ุนู ุชุทุงุจู ูู ูู ูุฆุฉ
        for (const category in smartResponses) {
            console.log('ูุญุต ุงููุฆุฉ:', category);
            for (const pattern of smartResponses[category].patterns) {
                // ุชุญููู ุงููุต ูุงูููุท ุฅูู ุฃุญุฑู ุตุบูุฑุฉ ููููุงุฑูุฉ
                const normalizedText = text.toLowerCase().replace(/[ุฃุฅุขุง]/g, 'ุง').replace(/[ูู]/g, 'ู').replace(/ุฉ/g, 'ู');
                const normalizedPattern = pattern.toLowerCase().replace(/[ุฃุฅุขุง]/g, 'ุง').replace(/[ูู]/g, 'ู').replace(/ุฉ/g, 'ู');
                
                if (normalizedText.includes(normalizedPattern)) {
                    console.log('ุชู ุงูุนุซูุฑ ุนูู ุชุทุงุจู:', pattern);
                    const replies = smartResponses[category].replies;
                    return replies[Math.floor(Math.random() * replies.length)];
                }
            }
        }
        
        // ุฅุฐุง ูุงู ุงูุณุคุงู ูุจุฏุฃ ุจู "ูุง ูู" ุฃู "ูุงูู"
        if (text.match(/^(ูุง|ูุงุฐุง|ููู|ูุชู|ุงูู|ุฃูู|ููุงุฐุง)\s/i)) {
            console.log('ุชู ุงูุชุดุงู ุณุคุงู');
            return smartResponses.questions.replies[Math.floor(Math.random() * smartResponses.questions.replies.length)];
        }
        
        console.log('ูู ูุชู ุงูุนุซูุฑ ุนูู ุชุทุงุจูุ ุงุณุชุฎุฏุงู ุงูุฑุฏ ุงูุนุงู');
        return smartResponses.general.replies[Math.floor(Math.random() * smartResponses.general.replies.length)];
    } catch (error) {
        console.error('ุฎุทุฃ ูู ุฏุงูุฉ getSmartResponse:', error);
        return 'ุนุฐุฑุงูุ ุญุฏุซ ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงูุฑุณุงูุฉ.';
    }
}

client.once('ready', async () => {
    console.log(`ุชู ุชุดุบูู ุงูุจูุช ุจูุฌุงุญ: ${client.user.tag}`);
    console.log('ูุงุฆูุฉ ุงูุณูุฑูุฑุงุช:');
    client.guilds.cache.forEach(guild => {
        console.log(`- ${guild.name} (${guild.id})`);
    });
    
    try {
        const rest = new REST({ version: '10' }).setToken(config.token);
        
        // ุชุณุฌูู ุงูุฃูุงูุฑ ูู ูู ุงูุณูุฑูุฑุงุช
        const guilds = client.guilds.cache;
        for (const [guildId, guild] of guilds) {
            console.log(`ูุญุงููุฉ ุชุณุฌูู ุงูุฃูุงูุฑ ูู ุงูุณูุฑูุฑ: ${guild.name}`);
            try {
                await rest.put(
                    Routes.applicationGuildCommands(client.user.id, guildId),
                    {
                        body: [
                            {
                                name: 'ai',
                                description: 'ุฃูุงูุฑ ุงูุฐูุงุก ุงูุงุตุทูุงุนู',
                                options: [
                                    {
                                        name: 'setup',
                                        description: 'ุชูุนูู ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูู ูุฐู ุงูููุงุฉ',
                                        type: ApplicationCommandOptionType.Subcommand
                                    },
                                    {
                                        name: 'disable',
                                        description: 'ุชุนุทูู ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูู ูุฐู ุงูููุงุฉ',
                                        type: ApplicationCommandOptionType.Subcommand
                                    },
                                    {
                                        name: 'status',
                                        description: 'ุนุฑุถ ุญุงูุฉ ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูู ูุฐู ุงูููุงุฉ',
                                        type: ApplicationCommandOptionType.Subcommand
                                    },
                                    {
                                        name: 'image',
                                        description: 'ุฅูุดุงุก ุตูุฑุฉ ุจุงุณุชุฎุฏุงู ุงูุฐูุงุก ุงูุงุตุทูุงุนู',
                                        type: ApplicationCommandOptionType.Subcommand,
                                        options: [
                                            {
                                                name: 'prompt',
                                                description: 'ูุตู ุงูุตูุฑุฉ ุงูุชู ุชุฑูุฏ ุฅูุดุงุกูุง',
                                                type: ApplicationCommandOptionType.String,
                                                required: true
                                            },
                                            {
                                                name: 'style',
                                                description: 'ููุท ุงูุตูุฑุฉ',
                                                type: ApplicationCommandOptionType.String,
                                                required: false,
                                                choices: [
                                                    { name: 'ูู ุฑููู', value: 'digital-art' },
                                                    { name: 'ุฃููู', value: 'anime' },
                                                    { name: 'ูุงูุนู', value: 'realistic' },
                                                    { name: 'ููุญุฉ ุฒูุชูุฉ', value: 'painting' },
                                                    { name: 'ุซูุงุซู ุงูุฃุจุนุงุฏ', value: '3d' }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                );
                console.log(`ุชู ุชุณุฌูู ุงูุฃูุงูุฑ ุจูุฌุงุญ ูู ุงูุณูุฑูุฑ: ${guild.name}`);
            } catch (guildError) {
                console.error(`ุฎุทุฃ ูู ุชุณุฌูู ุงูุฃูุงูุฑ ููุณูุฑูุฑ ${guild.name}:`, guildError);
            }
        }
    } catch (error) {
        console.error('ุฎุทุฃ ูู ุชุณุฌูู ุงูุฃูุงูุฑ:', error);
    }
    
    console.log('ุงูุจูุช ุฌุงูุฒ ููุนูู!');
    console.log('ุงููููุงุช ุงูููุนูุฉ:', config.aiChannels);
});

// ุงูุชุนุงูู ูุน ุงูุฃูุงูุฑ
client.on('interactionCreate', async interaction => {
    try {
        console.log('ุชูุงุนู ุฌุฏูุฏ:', interaction.commandName);
        
        if (!interaction.isCommand()) return;

        if (interaction.commandName === 'ai') {
            const subcommand = interaction.options.getSubcommand();
            console.log('ุงูุฃูุฑ ุงููุฑุนู:', subcommand);

            try {
                await interaction.deferReply();

                if (subcommand === 'setup') {
                    if (!interaction.memberPermissions.has(PermissionsBitField.Flags.Administrator)) {
                        return interaction.editReply({ content: 'ุนุฐุฑุงูุ ูุฐุง ุงูุฃูุฑ ูุชุงุญ ููุท ูููุดุฑููู.', ephemeral: true });
                    }

                    if (!config.aiChannels) {
                        config.aiChannels = [];
                    }

                    if (config.aiChannels.includes(interaction.channelId)) {
                        return interaction.editReply({ content: 'ูุฐู ุงูููุงุฉ ููุนูุฉ ุจุงููุนู ูููุงุฉ ุฐูุงุก ุงุตุทูุงุนู.', ephemeral: true });
                    }

                    config.aiChannels.push(interaction.channelId);
                    fs.writeFileSync('./config.json', JSON.stringify(config, null, 4));
                    console.log('ุชู ุชุญุฏูุซ ุงููููุงุช ุงูููุนูุฉ:', config.aiChannels);
                    
                    await interaction.editReply({ content: 'ุชู ุฅุนุฏุงุฏ ูุฐู ุงูููุงุฉ ุจูุฌุงุญ ูููุงุฉ ุฐูุงุก ุงุตุทูุงุนู! ๐' });
                }
                else if (subcommand === 'disable') {
                    if (!interaction.memberPermissions.has(PermissionsBitField.Flags.Administrator)) {
                        return interaction.editReply({ content: 'ุนุฐุฑุงูุ ูุฐุง ุงูุฃูุฑ ูุชุงุญ ููุท ูููุดุฑููู.', ephemeral: true });
                    }

                    if (!config.aiChannels) {
                        config.aiChannels = [];
                    }

                    const index = config.aiChannels.indexOf(interaction.channelId);
                    if (index === -1) {
                        return interaction.editReply({ content: 'ูุฐู ุงูููุงุฉ ุบูุฑ ููุนูุฉ ูููุงุฉ ุฐูุงุก ุงุตุทูุงุนู.', ephemeral: true });
                    }

                    config.aiChannels.splice(index, 1);
                    fs.writeFileSync('./config.json', JSON.stringify(config, null, 4));
                    console.log('ุชู ุชุญุฏูุซ ุงููููุงุช ุงูููุนูุฉ:', config.aiChannels);
                    
                    await interaction.editReply({ content: 'ุชู ุชุนุทูู ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูู ูุฐู ุงูููุงุฉ.' });
                }
                else if (subcommand === 'status') {
                    if (!config.aiChannels) {
                        config.aiChannels = [];
                    }
                    const isEnabled = config.aiChannels.includes(interaction.channelId);
                    await interaction.editReply({ content: `ุญุงูุฉ ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูู ูุฐู ุงูููุงุฉ: ${isEnabled ? 'โ ููุนู' : 'โ ูุนุทู'}` });
                }
                else if (subcommand === 'image') {
                    const prompt = interaction.options.getString('prompt');
                    const style = interaction.options.getString('style') || 'digital-art';
                    console.log('ุทูุจ ุฅูุดุงุก ุตูุฑุฉ:', prompt, 'ุงูููุท:', style);

                    try {
                        await interaction.editReply({ content: 'ุฌุงุฑู ุฅูุดุงุก ุงูุตูุฑุฉ... โณ\nูุฏ ุชุณุชุบุฑู ุงูุนูููุฉ ุจุถุน ุซูุงูู.' });
                        
                        const imageBase64 = await generateImage(prompt, style);
                        const imageBuffer = Buffer.from(imageBase64, 'base64');
                        
                        await interaction.editReply({ 
                            content: `ุชู ุฅูุดุงุก ุงูุตูุฑุฉ! ๐จ\nุงููุตู: ${prompt}\nุงูููุท: ${style}`,
                            files: [{
                                attachment: imageBuffer,
                                name: `generated-image-${style}.png`
                            }]
                        });
                        
                        console.log('ุชู ุฅูุดุงุก ุงูุตูุฑุฉ ุจูุฌุงุญ');
                    } catch (imageError) {
                        console.error('ุฎุทุฃ ูู ุฅูุดุงุก ุงูุตูุฑุฉ:', imageError);
                        await interaction.editReply({ 
                            content: 'ุนุฐุฑุงูุ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฅูุดุงุก ุงูุตูุฑุฉ. ุงูุฑุฌุงุก ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.\nุชุฃูุฏ ูู ุฃู ุงููุตู ููุงุณุจ ูุบูุฑ ูุญุธูุฑ.',
                            ephemeral: true 
                        });
                    }
                }
            } catch (commandError) {
                console.error('ุฎุทุฃ ูู ุชูููุฐ ุงูุฃูุฑ:', commandError);
                if (interaction.deferred) {
                    await interaction.editReply({ content: 'ุนุฐุฑุงูุ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชูููุฐ ุงูุฃูุฑ. ุงูุฑุฌุงุก ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.' });
                } else {
                    await interaction.reply({ content: 'ุนุฐุฑุงูุ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชูููุฐ ุงูุฃูุฑ. ุงูุฑุฌุงุก ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.', ephemeral: true });
                }
            }
        }
    } catch (error) {
        console.error('ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงูุชูุงุนู:', error);
    }
});

// ุงูุชุนุงูู ูุน ุงูุฑุณุงุฆู
client.on('messageCreate', async message => {
    try {
        if (message.author.bot) return;
        
        console.log(`ุฑุณุงูุฉ ุฌุฏูุฏุฉ ูู ุงูููุงุฉ ${message.channel.id} ูู ${message.author.tag}: ${message.content}`);
        console.log('ุงููููุงุช ุงูููุนูุฉ:', config.aiChannels);
        
        if (!config.aiChannels) {
            config.aiChannels = [];
        }

        if (config.aiChannels.includes(message.channel.id)) {
            console.log('ุงูููุงุฉ ููุนูุฉ ููุฐูุงุก ุงูุงุตุทูุงุนู');
            
            try {
                // ุฅุธูุงุฑ ุฃู ุงูุจูุช ููุชุจ
                await message.channel.sendTyping();
                
                // ูุญุงููุฉ ุงูุญุตูู ุนูู ุฑุฏ ูู Gemini ุฃููุงู
                let response;
                try {
                    response = await getGeminiResponse(message.content);
                } catch (geminiError) {
                    console.error('ุฎุทุฃ ูู Gemini:', geminiError);
                    response = getSmartResponse(message.content);
                }
                
                console.log('ุงูุฑุฏ ุงููุฎุชุงุฑ:', response);
                
                // ุฅุฑุณุงู ุงูุฑุฏ
                const reply = await message.reply({ content: response, failIfNotExists: false });
                console.log('ุชู ุฅุฑุณุงู ุงูุฑุฏ:', reply.content);
                
            } catch (error) {
                console.error('ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงูุฑุณุงูุฉ:', error);
                await message.reply({ 
                    content: 'ุนุฐุฑุงูุ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ูุนุงูุฌุฉ ุฑุณุงูุชู. ุญุงูู ูุฑุฉ ุฃุฎุฑู.',
                    failIfNotExists: false 
                });
            }
        } else {
            console.log('ุงูููุงุฉ ุบูุฑ ููุนูุฉ ููุฐูุงุก ุงูุงุตุทูุงุนู');
        }
    } catch (error) {
        console.error('ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงูุฑุณุงูุฉ:', error);
    }
});

// ูุนุงูุฌุฉ ุงูุฃุฎุทุงุก ุงูุนุงูุฉ
client.on('error', error => {
    console.error('ุฎุทุฃ ูู ุงูุจูุช:', error);
});

client.on('warn', warning => {
    console.warn('ุชุญุฐูุฑ ูู ุงูุจูุช:', warning);
});

client.on('debug', info => {
    console.log('ูุนูููุงุช ุงูุชุตุญูุญ:', info);
});

// ุชุณุฌูู ุงูุฏุฎูู ููุจูุช
console.log('ูุญุงููุฉ ุชุณุฌูู ุงูุฏุฎูู...');
client.login(config.token).then(() => {
    console.log('ุชู ุชุณุฌูู ุงูุฏุฎูู ุจูุฌุงุญ!');
}).catch(error => {
    console.error('ุฎุทุฃ ูู ุชุณุฌูู ุงูุฏุฎูู:', error);
}); 